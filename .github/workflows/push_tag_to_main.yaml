name: 🚀 Push Tag to Main & Deploy to Docker Hub

on:
  push:
    branches:
      - main  # Trigger workflow on pushes to the main branch

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow the job to create and push tags
      
    steps:
      - name: 📥 Checkout the repository
        uses: actions/checkout@v4  # Fetch repository code

      - name: 🔄 Fetch tags
        run: |
          git fetch --tags
          echo "✅ Tags downloaded!"

      - name: 🔍 Get the latest tag on main
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1) 2>/dev/null || echo "none")
          echo "Latest tag on main: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: 📄 Read selected version from file
        run: |
          selected_version=$(cat scripts/selected_version.txt)
          echo "📄 Selected version from file: $selected_version"
          echo "SELECTED_VERSION=$selected_version" >> $GITHUB_ENV

      - name: 🔄 Compare versions and create tag if needed
        run: |
          current_version="${{ env.LATEST_TAG }}"
          selected_version="${{ env.SELECTED_VERSION }}"

          echo "Current version: $current_version"
          echo "Selected version: $selected_version"

          if [ "$selected_version" != "$current_version" ]; then
            echo "🚀 Creating new tag: $selected_version"
            git checkout main
            git tag $selected_version
          else
            echo "⚠️ Selected version is the same as the latest version. No new tag will be created."
            exit 0
          fi

      - name: 📄 Read release note and title
        run: |
          title=$(head -n 1 scripts/release_note.md)
          echo "Release Title: $title"
          tail -n +2 scripts/release_note.md > scripts/temp_release_note.md
          
          pre_release=$(tail -n 1 scripts/temp_release_note.md)
          pre_release_flag=false
          
          if [ "$pre_release" == "PRE-RELEASE" ]; then
            echo "PRE-RELEASE detected"
            pre_release_flag=true
            sed -i '$d' scripts/temp_release_note.md
          fi
          
          mv scripts/temp_release_note.md scripts/release_note.md
          
          # Escape newlines and convert to single-line JSON string
          BODY=$(printf '%s' "$(cat scripts/release_note.md)" | sed 's/$/\\n/g' | tr -d '\n' | jq -Rs '.')
          
          echo "TITLE=$title" >> $GITHUB_ENV
          echo "PRE_RELEASE_FLAG=$pre_release_flag" >> $GITHUB_ENV
          echo "RELEASE_BODY=$BODY" >> $GITHUB_ENV

      - name: 📄 Prepare Release Note
        run: |
          tail -n +2 scripts/release_note.md > scripts/temp_release_note.md
          
          sed -i '$d' scripts/temp_release_note.md
          
          BODY=$(cat scripts/temp_release_note.md)
          
          ESCAPED_BODY=$(echo "$BODY" | jq -Rs '.')
          
          PRE_RELEASE_FLAG=false
          if grep -q "PRE-RELEASE" scripts/release_note.md; then
            PRE_RELEASE_FLAG=true
          fi
          
          echo "RELEASE_BODY=$ESCAPED_BODY" >> $GITHUB_ENV
          echo "PRE_RELEASE_FLAG=$PRE_RELEASE_FLAG" >> $GITHUB_ENV

      - name: 📄 Create GitHub Release
        run: |
          echo "Creating release: ${{ env.TITLE }}"

          body=$(cat scripts/release_note.md | sed ':a;N;$!ba;s/\n/\\n/g')

          json=$(printf '{"tag_name": "%s", "name": "%s", "body": "%s", "draft": false, "prerelease": %s}' \
            "${{ env.SELECTED_VERSION }}" "${{ env.TITLE }}" "$body" "${{ env.PRE_RELEASE_FLAG }}")
          
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -d "$json" \
               https://api.github.com/repos/${{ github.repository }}/releases


      - name: 🔎 Verify that the tag was created
        run: |
          git tag
          git show-ref --tags | grep ${{ env.SELECTED_VERSION }} || echo "❌ Tag not found!"

      - name: 📤 Push the tag to the remote repository
        run: |
          echo "🚀 Pushing tag: ${{ env.SELECTED_VERSION }}"
          git push origin ${{ env.SELECTED_VERSION }}

  push-docker:
    needs: create-release # Ensure the tagging job completes before running this job
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to include tags  

      - name: 🔍 Fetch and list tags
        run: |
          git fetch --tags 
          git tag        

      - name: 🏷️ Get last tag and set version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "VERSION=$VERSION" >> $GITHUB_ENV  

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Use secret credentials for authentication
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🐳 Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          push: true  # Push image to Docker Hub
          tags: codenames/codenames-backend:${{ env.VERSION }}  # Tag image with the retrieved version
          context: ./codenames-backend  # Set the build context
          file: ./codenames-backend/Dockerfile  # Use the backend Dockerfile

      - name: 🐳 Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          push: true  # Push image to Docker Hub
          tags: codenames/codenames-frontend:${{ env.VERSION }}  # Tag image with the retrieved version
          context: ./codenames-frontend  # Set the build context
          file: ./codenames-frontend/Dockerfile  # Use the frontend Dockerfile
